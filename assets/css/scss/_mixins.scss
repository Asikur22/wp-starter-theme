/* -------------------------------------
 * mixins
/* ------------------------------------- */

// hover focus active
@mixin hover($color: $theme-color) {
	&:hover,
	&:focus,
	&:active {
		color: $color;
	}
}

// hover focus active
@mixin hoverbg($color: #fff, $bg: $theme-color) {
	&:hover,
	&:focus,
	&:active {
		color: $color;
		background-color: $bg;
	}
}

// hover focus active
@mixin hoverbgborder($color: #fff, $bg: $theme-color, $border: $theme-color) {
	&:hover,
	&:focus,
	&:active {
		color: $color;
		background-color: $bg;
		border: 1px solid $border;
	}
}

// hover focus active
@mixin hoverborder($color: #fff, $border: $theme-color) {
	&:hover,
	&:focus,
	&:active {
		color: $color;
		border-color: $border;
	}
}

// Overlay
@mixin overlay($opacity: 0.5) {
	position: absolute;
	display: block;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: rgba(0, 0, 0, $opacity);
	z-index: 1;
}

// reset ul or ol
@mixin reset-list {
	margin: 0;
	padding: 0;
	list-style: none;
}

// size
@mixin size($width, $height) {
	width: $width;
	height: $height;
}

// size equal
@mixin size-equal($value) {
	width: $value;
	height: $value;
}

// text overflow
@mixin text-truncate($max-width: 100%) {
	max-width: $max-width;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// push auto
@mixin push-auto {
	margin-left: auto;
	margin-right: auto;
}

// opacity
@mixin opacity($value) {
	opacity: $value;
	$value-ie: ($value * 100);
	filter: alpha(opacity=$value-ie);
}

// triangle
@mixin triangle($direction, $size, $color, $position: static) {
	position: $position;
	display: block;
	@if $direction == top {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	} @else if $direction == bottom {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	} @else if $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	}
}

// rgba opacity
@mixin rgba-bg($color, $alpha) {
	$rgba: rgba(red($color), green($color), blue($color), $alpha);
	background-color: $color;
	background-color: $rgba;
}

@mixin rgba-color($color, $alpha) {
	$rgba: rgba(red($color), green($color), blue($color), $alpha);
	color: $color;
	color: $rgba;
}

@mixin rgba-border($color, $alpha) {
	$rgba: rgba(red($color), green($color), blue($color), $alpha);
	border-color: $color;
	border-color: $rgba;
}

// placeholder
@mixin placeholder($size, $color) {
	&::-webkit-input-placeholder {
		/* Chrome/Opera/Safari */
		font-size: $size;
		color: $color !important;
	}
	&::-moz-placeholder {
		/* Firefox 19+ */
		font-size: $size;
		color: $color !important;
	}
	&:-ms-input-placeholder {
		/* IE 10+ */
		font-size: $size;
		color: $color !important;
	}
	&:-moz-placeholder {
		/* Firefox 18- */
		font-size: $size;
		color: $color !important;
	}
}

// placeholder focus
@mixin placeholder-focus($size, $color) {
	&:focus::-webkit-input-placeholder {
		/* Chrome/Opera/Safari */
		font-size: $size;
		color: $color !important;
	}
	&:focus::-moz-placeholder {
		/* Firefox 19+ */
		font-size: $size;
		color: $color !important;
	}
	&:focus:-ms-input-placeholder {
		/* IE 10+ */
		font-size: $size;
		color: $color !important;
	}
	&:focus:-moz-placeholder {
		/* Firefox 18- */
		font-size: $size;
		color: $color !important;
	}
}
